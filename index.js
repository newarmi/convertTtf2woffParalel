import fs from 'fs/promises';
import path from 'path';
import Piscina from 'piscina';

const inputDir = './fonts'; // –ü–∞–ø–∫–∞ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ —à—Ä–∏—Ñ—Ç–∞–º–∏
const outputDir = './converted-fonts'; // –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ –ø–æ—Ç–æ–∫–æ–≤
const piscina = new Piscina({
    filename: path.resolve('./worker.js'), // –ü—É—Ç—å –∫ –≤–æ—Ä–∫–µ—Ä—É
    maxThreads: 8, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
});

// –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–∏
const ensureOutputDir = async () => {
    await fs.mkdir(outputDir, { recursive: true });
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
const processFonts = async () => {
    try {
        await ensureOutputDir();

        const files = await fs.readdir(inputDir);
        const ttfFiles = files.filter((file) => path.extname(file) === '.ttf');

        // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
        const tasks = ttfFiles.map((file) => {
            const inputFile = path.join(inputDir, file);
            return piscina.run({ inputFile, outputDir }); // –ü–µ—Ä–µ–¥–∞—ë–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ task
        });
        console.time('generate')
        await Promise.all(tasks);
        console.timeEnd('generate')
        console.log('üéâ –í—Å–µ —à—Ä–∏—Ñ—Ç—ã —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!');
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤:', err);
    }
};

processFonts();
